name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/discord-p4-bot:latest
          build-args: |
            NODE_ENV=production

      - name: Setup VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # CrÃ©er le dossier du projet s'il n'existe pas
            mkdir -p ~/discord-p4-bot
            cd ~/discord-p4-bot
            
            # Copier les fichiers de configuration s'ils n'existent pas
            if [ ! -f "docker-compose.yml" ]; then
              cat > docker-compose.yml << 'EOL'
              services:
                api:
                  image: ${{ secrets.DOCKERHUB_USERNAME }}/discord-p4-bot:latest
                  container_name: nest-api
                  ports:
                    - "3000:3000"
                  environment:
                    - NODE_ENV=production
                    - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
                    - REDIS_URL=redis://redis:6379
                  depends_on:
                    - postgres
                    - redis

                postgres:
                  image: postgres:latest
                  container_name: postgres-db
                  environment:
                    - POSTGRES_USER=postgres
                    - POSTGRES_PASSWORD=postgres
                    - POSTGRES_DB=postgres
                  ports:
                    - "5432:5432"
                  volumes:
                    - postgres_data:/var/lib/postgresql/data

                redis:
                  image: redis:latest
                  container_name: redis-cache
                  ports:
                    - "6379:6379"
                  volumes:
                    - redis_data:/data

                nginx:
                  image: nginx:latest
                  container_name: nginx-proxy
                  ports:
                    - "80:80"
                  volumes:
                    - ./nginx.conf:/etc/nginx/nginx.conf:ro
                  depends_on:
                    - api

              volumes:
                postgres_data:
                redis_data:
              EOL
            fi

            if [ ! -f "nginx.conf" ]; then
              cat > nginx.conf << 'EOL'
              events {
                worker_connections 1024;
              }

              http {
                upstream api {
                  server api:3000;
                }

                server {
                  listen 80;
                  server_name localhost;

                  location / {
                    proxy_pass http://api;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                  }
                }
              }
              EOL
            fi

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/discord-p4-bot
            docker compose pull
            docker compose up -d --force-recreate
