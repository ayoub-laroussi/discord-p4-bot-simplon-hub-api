name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1 & 2. Construire et push l'image Docker
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true  
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/discord-p4-bot:latest

      # 3. Déployer avec docker-compose
      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml,nginx.conf"
          target: "~/discord-p4-bot"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/discord-p4-bot
            
            # Arrêter et supprimer tous les conteneurs existants
            echo "Cleaning up old containers..."
            docker stop nest-api postgres-db redis-cache nginx-proxy || true
            docker rm nest-api postgres-db redis-cache nginx-proxy || true
            
            # Supprimer les réseaux existants
            echo "Cleaning up networks..."
            docker network rm discord-p4-bot_default || true
            
            echo "Starting deployment..."
            docker-compose pull
            docker-compose up -d
            
            echo "Checking containers status..."
            docker ps
            
            echo "Deployment complete"