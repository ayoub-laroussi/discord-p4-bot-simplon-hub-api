name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1 & 2. Construire et push l'image Docker
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/discord-p4-bot:latest

      # 3. Vérifier les permissions Docker sur le VPS
      - name: Check Docker Permissions
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          script: |
            # Vérifier si l'utilisateur est dans le groupe docker
            if ! groups | grep -q docker; then
              echo "L'utilisateur n'est pas dans le groupe docker"
              echo "Exécutez cette commande sur le VPS avec sudo :"
              echo "sudo usermod -aG docker $USER"
              exit 1
            fi
            # Vérifier l'accès au socket Docker
            docker ps > /dev/null 2>&1 || { echo "Pas d'accès au socket Docker"; exit 1; }

      # 4. Déployer
      - name: Deploy to VPS
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          command_timeout: 10m
          script: |
            # Pull la nouvelle image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/discord-p4-bot:latest
            
            # Arrêter et supprimer l'ancien conteneur s'il existe
            docker stop nest-api || true
            docker rm nest-api || true
            
            # Lancer le nouveau conteneur
            docker run -d \
              --name nest-api \
              -p 3000:3000 \
              --network discord-network \
              -e NODE_ENV=production \
              -e DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres \
              -e REDIS_URL=redis://redis:6379 \
              ${{ secrets.DOCKERHUB_USERNAME }}/discord-p4-bot:latest
